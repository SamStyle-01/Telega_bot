import sqlite3
import telebot
from telebot import types
import bcrypt
import joblib
import re

salt = joblib.load("salt")

bot = telebot.TeleBot("6578193845:AAFdBaFu7ZaioHvQb8wWgzMsZPOdluh2lUg")
conn = sqlite3.connect("C:\\Users\\Sam\\PycharmProjects\\SamProject\\datastud.db",
                       check_same_thread=False)
cursor = conn.cursor()

commands = ["üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É", "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤",
            "üìå –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞", "üìã –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞",
            "üì∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã", "‚úâÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "üìá –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –±–∞–ª–ª–∞–º"]

temp_name = ""              # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç.
temp_num = ""               # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç.
career_center = False       # –ü–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ.
choosing_elective = False   # –ü–æ–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤.
finding_student = False     # –ü–æ–∫–∞ –∏—â–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

is_mark0 = False        # –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞.
is_mark = False         # –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞.
is_mark2 = False        # –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞.
adding_link = False     # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É.
averaging = False       # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É.

users_id = dict()   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-—Å—Ç—É–¥–µ–Ω—Ç—ã.
admin_user_id = []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞.
all_users_id = set()  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
employers_id = []   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞.

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–æ–±—â–µ –≤—Å–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.
# –ù—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫—Ç–æ –∫–∞–∫–æ–π –¥–æ—Å—Ç—É–ø –∏–º–µ–µ—Ç.


def confirm_it(message):
    cursor.execute('SELECT * FROM Students WHERE Name = ?;', (temp_name,))
    data = cursor.fetchone()[3].split(" ")
    data[(int(temp_num) - 1) * 2] = str(message.text)
    conn.execute("UPDATE Students SET Links = ? WHERE Name = ?",
                 (' '.join(data), temp_name))
    conn.commit()


def is_valid_link(link):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    link_pattern = r'^https?://(?:www\.)?\S+$'
    return re.match(link_pattern, link)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     text="–ü—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
    all_users_id.add(message.from_user.id)
    bot.register_next_step_handler(message, authentication)


@bot.message_handler(content_types=['text'])
def authentication(message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –æ–±—â–µ–Ω–∏—è —Å –Ω–∏–º.
    if message.from_user.id in users_id.keys() or message.from_user.id in admin_user_id or message.from_user.id in \
                                                                                           employers_id:
        bot.register_next_step_handler(message, func)
        func(message)

    else:  # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ç—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å.
        cursor.execute('SELECT * FROM Students WHERE Password = ?;',
                       (bcrypt.hashpw(message.text.encode(), salt),))
        code1 = cursor.fetchone()
        cursor.execute('SELECT * FROM Professors WHERE Password = ?;',
                       (bcrypt.hashpw(message.text.encode(), salt),))
        code2 = cursor.fetchone()
        cursor.execute('SELECT * FROM Employers WHERE Password = ?;',
                       (bcrypt.hashpw(message.text.encode(), salt),))
        code3 = cursor.fetchone()
        if code1 is not None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É")
            btn2 = types.KeyboardButton("üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤")
            btn3 = types.KeyboardButton("üìå –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞")
            btn4 = types.KeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞")
            markup.add(btn1, btn2, btn3, btn4)
            bot.send_message(message.chat.id, text='–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã –∑–∞—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' +
                                                   code1[2] + ".\n" +
                                                   '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=markup)
            users_id[message.from_user.id] = code1[0]
            bot.register_next_step_handler(message, func)
        elif code2 is not None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üì∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã")
            btn2 = types.KeyboardButton("‚úâÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
            markup.add(btn1, btn2)
            bot.send_message(message.chat.id, text='–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ' +
                                                   code2[2] + ".\n" +
                                                   '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=markup)
            admin_user_id.append(message.from_user.id)
            bot.register_next_step_handler(message, func)
        elif code3 is not None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("‚úâÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
            btn2 = types.KeyboardButton("üìá –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –±–∞–ª–ª–∞–º")
            markup.add(btn1, btn2)
            bot.send_message(message.chat.id, text='–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å ' +
                                                   code3[2] + ".\n" +
                                                   '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=markup)
            employers_id.append(message.from_user.id)
            bot.register_next_step_handler(message, func)
        else:
            if message.from_user.id in all_users_id and message.text not in commands:
                bot.reply_to(message, '–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')
            elif message.text in commands and message.from_user.id in all_users_id:
                bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...')
            else:
                bot.reply_to(message, '–ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /start.')


@bot.message_handler(content_types=['text'])
def func(message):
    global is_mark, is_mark2, adding_link, averaging, \
                temp_name, career_center, choosing_elective, finding_student, is_mark0, temp_num, employers_id
    if message.from_user.id in admin_user_id:
        if message.text == "üì∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã":
            bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            is_mark = True
        elif message.text == "‚úâÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
            bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            finding_student = True
        elif message.text == "–ü—Ä–æ—Å—Ç–∏. –ü—Ä–æ—â–∞–π.":
            admin_user_id.remove(message.from_user.id)
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        # –ë–ª–æ–∫ —á–∏—Å—Ç–æ—Ç—ã.
        elif is_mark:
            is_mark = False
            is_mark0 = True
            temp_name = message.text
            cursor.execute('SELECT * FROM Students WHERE Name = ?;', (message.text,))
            data = cursor.fetchone()
            data2 = data[3].split(" ")
            if len(data2) == 1 and data2[0] == '':
                bot.send_message(message.chat.id, "–°—Ç—É–¥–µ–Ω—Ç–æ–º –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç.")
                is_mark0 = False
            else:
                to_show = ""
                for el in range(len(data2)):
                    if el % 2:
                        to_show += str((el - 1) // 2 + 1) + ": " + str(data2[el]) + "\n"
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:" + "\n" + to_show)
        elif is_mark0:
            temp_num = message.text

            is_mark0 = False
            is_mark2 = True
            bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ —Ä–∞–±–æ—Ç—É:")
        elif is_mark2:
            is_mark2 = False
            confirm_it(message)
            bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            temp_name = ""
            temp_num = ""

        elif finding_student:
            finding_student = False
            cursor.execute('SELECT * FROM Students WHERE Name = ?;', (message.text,))
            data = cursor.fetchone()
            if data is None:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç!")
            else:
                for_show = "–°—Ç—É–¥–µ–Ω—Ç " + data[2] + ":\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                if not len(data[3]):
                    for_show += "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
                else:
                    data2 = data[3].split(" ")
                    for i in range(len(data2)):
                        if i % 2:
                            if int(data2[i - 1]):
                                for_show += str((i - 1) // 2 + 1) + ". " + data2[i] + " –æ—Ü–µ–Ω–∫–∞: " + data2[i - 1] + "\n"
                            else:
                                for_show += str((i - 1) // 2 + 1) + ". " + data2[i] + "\n"
                for_show += "\n"
                for_show += "Soft Skills: " + str(data[4]) + "\n"
                for_show += "Backend –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[5]) + "\n"
                for_show += "Frontend –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[6]) + "\n"
                for_show += "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: " + str(data[7]) + "\n"
                for_show += "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[8]) + "\n"
                for_show += "–î–∏–∑–∞–π–Ω: " + str(data[9]) + "\n"
                for_show += "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: " + str(data[10]) + "\n\n"
                average_mark = (data[4] + data[5] + data[6] + data[7] + data[8] + data[9] + data[10]) / 7
                for_show += "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: " + str(round(average_mark, 2)) + ".\n"
                for_show += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞—Ö: "
                if data[11] is not None:
                    for_show += data[11] + "."
                else:
                    for_show += "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                bot.send_message(message.chat.id, text=for_show)
        else:
            bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞. –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.")
    elif message.from_user.id in users_id.keys() and not is_mark:
        if message.text == "üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É":
            adding_link = True
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É:")
        elif message.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤":
            cursor.execute('SELECT * FROM Electives;')
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:")
            for el in cursor.fetchall():
                for_show = el[1] + ".\n\n"
                el = el[2].split("; ")
                el = [elx.split(": ") for elx in el]
                for i in range(len(el)):
                    el[i][1] = el[i][1].split(", ")
                    el[i][0] = el[i][0].split(" / ")
                for i in range(len(el)):
                    for_show += (el[i][0][0] + ": " + str(el[i][0][1]) + " —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.\n\n–ù–∞–≤—ã–∫–∏:\nüî∏"
                                                    + "\nüî∏".join(el[i][1]) + ".\n\n")
                bot.send_message(message.chat.id, for_show)
        elif message.text == "üìå –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞":
            career_center = True
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(btn1)
            cursor.execute('SELECT Indexes, Name FROM CareerCenters;')
            data = cursor.fetchall()
            data = sorted(data, key=lambda x: x[0])
            for_show = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.\n\n"
            for i in range(len(data)):
                for_show += str(data[i][0]) + ". " + data[i][1] + ".\n"

            bot.send_message(message.chat.id, text=for_show, reply_markup=markup)

        elif message.text == "üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            career_center = False
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É")
            btn2 = types.KeyboardButton("üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤")
            btn3 = types.KeyboardButton("üìå –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞")
            btn4 = types.KeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞")
            markup.add(btn1, btn2, btn3, btn4)
            bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
        elif message.text == "üìã –í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞":
            cursor.execute('SELECT DISTINCT Direction FROM Electives')
            data = cursor.fetchall()
            for_show = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            if len(data):
                for i in range(len(data)):
                    for_show += "üîª " + data[i][0] + ".\n"
                bot.send_message(message.chat.id, text=for_show)
                choosing_elective = True
            else:
                bot.send_message(message.chat.id, text="–¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ—Ç.")
        elif message.text == "–ü—Ä–æ—Å—Ç–∏. –ü—Ä–æ—â–∞–π.":
            del users_id[message.from_user.id]
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        # –ë–ª–æ–∫ —á–∏—Å—Ç–æ—Ç—ã.
        elif choosing_elective:
            choosing_elective = False
            cursor.execute('SELECT Name FROM Electives WHERE Direction = ?', (message.text,))
            data = cursor.fetchall()
            for i in range(len(data)):
                data[i] = data[i][0]
            bot.send_message(message.chat.id, text="–í—ã–±–æ—Ä–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n‚úîÔ∏è" + "\n‚úîÔ∏è".join(data))
        elif career_center:
            cursor.execute('SELECT * FROM Students WHERE Indexes = ?;',
                           (users_id[message.from_user.id],))
            student = cursor.fetchone()
            cursor.execute('SELECT * FROM CareerCenters WHERE Indexes = ?;',
                           (message.text,))
            requirements = cursor.fetchone()
            result = []
            for i in range(7):
                result.append(int(student[i + 4] - int(requirements[i + 2])))
            has_negatives = any(x < 0 for x in result)
            if not has_negatives:
                bot.send_message(message.chat.id, "–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —ç—Ç–æ–≥–æ "
                                                  "–∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.")
            else:
                for_show = "–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤:\n\n"
                if result[0] < 0:
                    for_show += "Soft Skills: " + str(-result[0]) + " –µ–¥–∏–Ω–∏—Ü.\n"
                if result[1] < 0:
                    for_show += ("Backend –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(-result[1]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                if result[2] < 0:
                    for_show += ("Frontend –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(-result[2]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                if result[3] < 0:
                    for_show += ("–ù–∞–≤—ã–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏: " + str(-result[3]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                if result[4] < 0:
                    for_show += ("–ù–∞–≤—ã–∫ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è: " + str(-result[4]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                if result[5] < 0:
                    for_show += ("–ù–∞–≤—ã–∫ –¥–∏–∑–∞–π–Ω–∞: " + str(-result[5]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                if result[6] < 0:
                    for_show += ("–ù–∞–≤—ã–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: " + str(-result[6]) + " –µ–¥–∏–Ω–∏—Ü.\n")
                bot.send_message(message.chat.id, for_show)
        elif adding_link:
            if is_valid_link(message.text):
                cursor.execute('SELECT Links FROM Students WHERE Indexes = ?;',
                               (users_id[message.from_user.id],))

                links = cursor.fetchone()[0]
                if links.strip():
                    links = links.split(" ")
                else:
                    links = []

                links.append("0")
                links.append(message.text)
                conn.execute("UPDATE Students SET Links = ? WHERE Indexes = ?",
                             (' '.join(links), users_id[message.from_user.id]))
                conn.commit()
                bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                adding_link = False
            else:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞.")
        else:
            bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞. –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.")
    elif message.from_user.id in employers_id:
        if message.text == "‚úâÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
            bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            finding_student = True
        elif message.text == "–ü—Ä–æ—Å—Ç–∏. –ü—Ä–æ—â–∞–π.":
            employers_id.remove(message.from_user.id)
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        elif message.text == "üìá –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –±–∞–ª–ª–∞–º":
            bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–Ω—é—é –ø–ª–∞–Ω–∫—É —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞:")
            averaging = True
        # –ë–ª–æ–∫ —á–∏—Å—Ç–æ—Ç—ã.
        elif averaging:
            averaging = False
            cursor.execute('SELECT Name, (Soft_Skills + Backend_Programming + '
                           'Frontend_Programming + Engineering + Construction + Design + Mathematics) / 7 '
                           'FROM Students WHERE (Soft_Skills + Backend_Programming + '
                           'Frontend_Programming + Engineering + Construction + Design + Mathematics) / 7 > ?;',
                           (float(message.text),))
            result = cursor.fetchall()
            for_show = "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã:\n"
            print(result)
            for i in range(len(result)):
                for_show += result[i][0] + ": " + str(result[i][1]) + " –±–∞–ª–ª–æ–≤.\n"
            bot.send_message(message.chat.id, text=for_show)
        elif finding_student:
            finding_student = False
            cursor.execute('SELECT * FROM Students WHERE Name = ?;', (message.text,))
            data = cursor.fetchone()
            if data is None:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç!")
            else:
                for_show = "–°—Ç—É–¥–µ–Ω—Ç " + data[2] + ":\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                if not len(data[3]):
                    for_show += "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
                else:
                    data2 = data[3].split(" ")
                    for i in range(len(data2)):
                        if i % 2:
                            if int(data2[i - 1]):
                                for_show += str((i - 1) // 2 + 1) + ". " + data2[i] + " –æ—Ü–µ–Ω–∫–∞: " + data2[i - 1] + "\n"
                            else:
                                for_show += str((i - 1) // 2 + 1) + ". " + data2[i] + "\n"
                for_show += "\n"
                for_show += "Soft Skills: " + str(data[4]) + "\n"
                for_show += "Backend –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[5]) + "\n"
                for_show += "Frontend –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[6]) + "\n"
                for_show += "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: " + str(data[7]) + "\n"
                for_show += "–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ: " + str(data[8]) + "\n"
                for_show += "–î–∏–∑–∞–π–Ω: " + str(data[9]) + "\n"
                for_show += "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: " + str(data[10]) + "\n\n"
                average_mark = (data[4] + data[5] + data[6] + data[7] + data[8] + data[9] + data[10]) / 7
                for_show += "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: " + str(round(average_mark, 2)) + ".\n"
                for_show += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞—Ö: "
                if data[11] is not None:
                    for_show += data[11] + "."
                else:
                    for_show += "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                bot.send_message(message.chat.id, text=for_show)
        else:
            bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞. –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.")


bot.polling(none_stop=True)
